Features:

- Designed so that usage of GSL is as if GSL were written in CL:
  information flow correctly through functions, full condition
  handling, all information returned is available.

- Conditions are handled in a Lisp-friendly way; full use of the CL
  condition system with full explanations.

- Uses CFFI.  Should work with any Common Lisp that supports CFFI with
  callbacks and foreign-funcall.

- This library is pure common lisp.  No C is used; the only requirement
is that the GSL library must be loaded and accessible.

---- policies:

- All arrays and vectors that need to be passed to and from are
  converted to or from GSL vectors or matrices; for GSL functions that
  take/return raw C arrays (or pointers), a layer is wrapped
  around them that do the conversion.

-  Each defun-gsl corresponds to one C function.  Where multiple
  such functions may be combined into a single regular or generic
  function. 

======================
Needs work:
See Thu Apr 20 2006 

There are 14 kinds of element types for vectors and matrices:

gsl_vector_complex_long_double.h
gsl_vector_complex_double.h
gsl_vector_complex_float.h

gsl_vector_long_double.h
gsl_vector_double.h
gsl_vector_float.h

gsl_vector_ulong.h
gsl_vector_long.h

gsl_vector_uint.h
gsl_vector_int.h

gsl_vector_ushort.h
gsl_vector_short.h

gsl_vector_uchar.h
gsl_vector_char.h

I implemented only int, double, complex.

It would be nice to use e.g. vector-sap for direct vectors in
e.g. SBCL.

- reading and writing functions will require handling of C streams,
  not provided.
  
