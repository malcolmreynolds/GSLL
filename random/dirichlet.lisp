;; Dirichlet distribution
;; Liam Healy, Sun Oct 29 2006
;; Time-stamp: <2008-02-02 23:00:40EST dirichlet.lisp>
;; $Id: $

(in-package :gsl)

(defun-gsl dirichlet (generator alpha theta)
  "gsl_ran_dirichlet"
  (((generator generator) :pointer)
   ((dim0 alpha) :size)
   ((gsl-array alpha) :pointer)
   ;; theta had better be at least as long as alpha, or they'll be trouble
   ((gsl-array theta) :pointer))
  :c-return :void
  :documentation
  "An array of K=(length alpha) random variates from a Dirichlet
  distribution of order K-1.  The distribution function is
  p(\theta_1,\ldots,\theta_K) \, d\theta_1 \cdots d\theta_K = 
        {1 \over Z} \prod_{i=1}^{K} \theta_i^{\alpha_i - 1} 
          \; \delta(1 -\sum_{i=1}^K \theta_i) d\theta_1 \cdots d\theta_K
  @math{theta_i >= 0} and @math{alpha_i >= 0}.
  The delta function ensures that @math{\sum \theta_i = 1}.
  The normalization factor @math{Z} is
  Z = {\prod_{i=1}^K \Gamma(\alpha_i) \over \Gamma( \sum_{i=1}^K \alpha_i)}
  The random variates are generated by sampling @var{K} values 
  from gamma distributions with parameters @math{a=alpha_i, b=1}, 
  and renormalizing. 
  See A.M. Law, W.D. Kelton, @cite{Simulation Modeling and Analysis}
  (1991).")

(defun-gsl dirichlet-pdf (alpha theta)
  "gsl_ran_dirichlet_pdf"
  (((1- (dim0 alpha)) :size)
   ((gsl-array alpha) :pointer)
   ;; theta had better be at least as long as alpha, or they'll be trouble
   ((gsl-array theta) :pointer))
  :c-return :double
  :documentation
  "The probability density @math{p(\theta_1, ... , \theta_K)}
   at @var{theta}[@var{K}] for a Dirichlet distribution with parameters 
   @var{alpha}[@var{K}], using the formula given for #'dirichlet.")

(defun-gsl dirichlet-log-pdf (alpha theta)
  "gsl_ran_dirichlet_lnpdf"
  (((1- (dim0 alpha)) :size)
   ((gsl-array alpha) :pointer)
   ;; theta had better be at least as long as alpha, or they'll be trouble
   ((gsl-array theta) :pointer))
  :c-return :double
  :documentation
  "The logarithm of the probability density 
   @math{p(\theta_1, ... , \theta_K)}
   for a Dirichlet distribution with parameters 
   @var{alpha}[@var{K}].")

;;; Examples and unit test
(lisp-unit:define-test dirichlet
  (lisp-unit:assert-equal
   '("0.392833324564d-04" "0.468176310887d+00"
     "0.340750440311d+00" "0.191033965469d+00")
   (lisp-unit:fp-sequence
    (letm ((rng (random-number-generator *mt19937* 0))
	   (alpha (vector-double #(1.0d0 2.0d0 3.0d0 4.0d0)))
	   (theta (vector-double 4)))
      (dirichlet rng alpha theta)
      (data theta))))
  (lisp-unit:assert-first-fp-equal
   "0.288000000000d+01"
   (letm ((alpha (vector-double #(1.0d0 2.0d0 3.0d0 4.0d0)))
	  (theta (vector-double #(0.1d0 0.3d0 0.4d0 0.2d0))))
     (dirichlet-pdf alpha theta)))
  (lisp-unit:assert-first-fp-equal
   "0.105779029415d+01"
   (letm ((alpha (vector-double #(1.0d0 2.0d0 3.0d0 4.0d0)))
	  (theta (vector-double #(0.1d0 0.3d0 0.4d0 0.2d0))))
     (dirichlet-log-pdf alpha theta))))
